#include <stdlib.h>
#include <vector>
#include <stdio.h>
#include <sys/select.h>
#include "tcpsocket.hpp"

class Select{
    public:
        Select():_maxfd(-1){
            FD_ZERO(&_rfds);
        }
        ~Select(){}
        bool Add(TcpSocket& sock){
           //添加
           int fd = sock.GetFd();
           FD_SET(fd,&_rfds);
           //更新最大描述符
           _maxfd = fd > _maxfd ? fd : _maxfd;
           return true;
        }
        bool Del(TcpSocket& sock){
            int fd = sock.GetFd();
            FD_CLR(fd,&_rfds);
                    _maxfd = i;
                    return true;
                }
            }
            _maxfd = -1;
            return true;
        }

        bool Wait(std::vector<TcpSocket>& list,int sec = 3){
            struct timeval tv;
            tv.tv_sec = sec;
            tv.tv_usec = 0;
            fd_set tmp = _rfds;
            int count;
            count = select(_maxfd+1,&tmp,NULL,NULL,&tv);
            if(count < 0){
                perror("select error");
                return false;
            }else if (count == 0){
                std::cout << "wait timeout" << std::endl;
                return false;
            }
            for(int i = 0;i <= _maxfd;i++){
                if(FD_ISSET(i,&tmp)){
                    TcpSocket sock;
                    sock.SetFd(i);
                    list.push_back(sock);
                }
            }
            return true;
        }

    private:
        fd_set _rfds;
        int _maxfd;
};


int main(int argc,char* argv[]){
    if(argc != 3){
        std::cout << "./tcp_select.cpp 192.168.73.128 8000" << std::endl;
        return -1;
    }
    std::string srv_ip = argv[1]; 
    uint16_t srv_port = atoi(argv[2]);
    TcpSocket sock;
    CHECK_RET(sock.Socket()); //创建套接字
    CHECK_RET(sock.Bind(srv_ip,srv_port)); //绑定地址信息
    CHECK_RET(sock.Listen());
    Select s;
    s.Add(sock);
    while(1){
        std::vector<TcpSocket> list;
        bool ret = s.Wait(list);
        if(ret == false){
            continue;
        }
        for(size_t i = 0;i < list.size();i++){
            if(list[i].GetFd() == sock.GetFd()){
                TcpSocket cli_sock;
                if(sock.Accept(cli_sock) == false){

                }
                s.Add(cli_sock);
            }else{

            } 
    sock.Close();
    return 0;
}
