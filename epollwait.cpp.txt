#include <iostream>
#include <vector>
#include <stdlib.h>
#include <string>
#include <sys/epoll.h>
#include "tcpsocket.hpp"

#define MAX_EPOLL 1024

class Epoll{
    public:
        Epoll():_epfd(-1){

        }
        ~Epoll(){

        }
    public:
        bool Init(){
            _epfd = epoll_create(MAX_EPOLL);
            if (_epfd == -1){
                std::cerr << "epoll_creat error" << std::endl;
                return false;
            }
            return true;
        }
        bool Add(TcpSocket& sock){
            struct epoll_event ev;
            int fd = sock.GetFd();
            ev.events = EPOLLIN;
            ev.data.fd = fd;
            int ret = epoll_ctl(_epfd,EPOLL_CTL_ADD,fd,&ev);
            if(ret == -1){
                std::cerr << "epoll ctl error" << std::endl;
                return false;
            }
            return true;
        }
        bool Del(TcpSocket& sock){
            int fd = sock.GetFd();
            int ret = epoll_ctl(_epfd,EPOLL_CTL_DEL,fd,NULL);
            if(ret == -1){
                std::cerr << "remove listen error" << std::endl;
                return false;
            }
            return true;
        }
        bool Wait(std::vector<TcpSocket>& list,int timeout = 3000){
            struct epoll_event evs[MAX_EPOLL];

            int nfds = epoll_wait(_epfd,evs,MAX_EPOLL,timeout);
            if(nfds < 0){
                std::cerr << "epoll moniter error" << std::endl;
                return false;
            }else if(nfds == 0){
                std::cerr << "epoll wait timeout" << std::endl;
                return false;
            }
            for(int i = 0;i < nfds;i++){
                int fd = evs[i].data.fd;
                TcpSocket sock;
                sock.SetFd(fd);
                list.push_back(sock);
            }
            return true;
        }

    private:
        int _epfd;
};

int main(int argc,char* argv[]){
    if(argc != 3){
        std::cerr << "./tcp_epoll 192.168.73.128 8000" << std::endl;
        return -1;
    }
    std::string srv_ip = argv[1];
    uint16_t srv_port = atoi(argv[2]);
    TcpSocket lis_sock;
    CHECK_RET(lis_sock.Socket());
    CHECK_RET(lis_sock.Bind(srv_ip,srv_port));
    CHECK_RET(lis_sock.Listen());
    Epoll e;
    e.Init();
    e.Add(lis_sock);
    while(1){
        std::vector<TcpSocket> list;
        bool ret = e.Wait(list);
        if(ret == false){ //没有就绪描述符或者超时
            continue; 
        }
        for(size_t i = 0;i < list.size();i++){
            if(list[i].GetFd() == lis_sock.GetFd()){
                TcpSocket cli_sock;
                if(lis_sock.Accept(cli_sock) == false){
                    continue;
                }
                e.Add(cli_sock);
            }else{
                //收发数据
                std::string buf;
                if(list[i].Recv(buf) == false){
                    e.Del(list[i]);
                    list[i].Close();
                    continue;
                }
                std::cout << "client say:" << buf << std::endl;
                buf.clear();
                std::cin >> buf;
                if(list[i].Send(buf) == false){
                    e.Del(list[i]);
                    list[i].Close();
                    continue;
                }
            } 
        }

    }
    lis_sock.Close(); //关闭监听套接字
    return 0;
}
