#include <iostream>
#include <string>
#include <unistd.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>

#define CHECK_RET(q) if((q) == false){return -1;}
class TcpSocket{
    public:
        TcpSocket() :_sockfd(-1){
        }
        ~TcpSocket(){
            Close();
        }
        bool Socket(){
            _sockfd = socket(AF_INET,SOCK_STREAM,IPPROTO_TCP);
            if(_sockfd < 0){
                std::cerr << "socket error" << std::endl;
                return false;
            }
            return true;
        }
        bool Bind(std::string& ip,uint16_t port){
            struct sockaddr_in addr;
            addr.sin_family = AF_INET;
            addr.sin_port = htons(port);
            addr.sin_addr.s_addr = inet_addr(ip.c_str());
            socklen_t len = sizeof(struct sockaddr_in);
            int ret = bind(_sockfd,(struct sockaddr*)&addr,len);
            if(ret < 0){
                std::cerr << "bind error" << std::endl;
                return false;
            }
            return true;
        }
        bool Listen(int backlog = 5){
            int ret = listen(_sockfd,backlog);
            if(ret < 0){
                std::cerr << "listen error" << std::endl;
                return false;
            }
            return true;
        }
        bool Connect(std::string& ip,uint16_t port){
            int ret;
            struct sockaddr_in addr;
            addr.sin_family = AF_INET;
            addr.sin_port = htons(port);
            addr.sin_addr.s_addr = inet_addr(ip.c_str());
            socklen_t len = sizeof(struct sockaddr_in);
            ret = connect(_sockfd,(struct sockaddr*)&addr,len);
            if(ret < 0){
                std::cerr << "connect error" << std::endl;
                return false;
            }
            return true;
        }
        void SetFd(int fd){
            _sockfd = fd;
        }
        bool Accept(TcpSocket& newsock){
            struct sockaddr_in addr;
            socklen_t len = sizeof(struct sockaddr_in);
            int fd = accept(_sockfd,(struct sockaddr*)&addr,&len);
            if(fd < 0){
                std::cerr << "acccept error" << std::endl;
                return false;
            }
            newsock.SetFd(fd);
            return true;
        }
        bool Send(std::string& buf){
            int ret = send(_sockfd,&buf[0],buf.size(),0);
            if(ret < 0){
                std::cerr << "send error" << std::endl;
                return false;
            }
            return true;
        }
        bool Recv(std::string& buf){
            char tmp[4096] = {0};
            int ret = recv(_sockfd,&tmp,4096,0);
            if(ret < 0){
                std::cerr << "recv error" << std::endl;
                return false;
            }else if(ret == 0){ //(不代表没有读到数据)而是表示连接已经断开   没有数据会阻塞
                std::cerr << "peer shutdown" << std::endl;
            }
            buf.assign(tmp,ret);
            return true;
        }
        bool Close(){
            if(_sockfd >= 0){
                close(_sockfd);
                _sockfd = -1;
            }
            return true;
        }
    private:
        int _sockfd;
};
