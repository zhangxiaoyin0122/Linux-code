进程创建:
	(1).pid_t pid = fork(void);
	返回值:对于父进程返回的是子进程的pid,是大于0的;对于子进程返回的是0;通过返回值可以进行父子进程代码分流.

通过复制父进程创建一个子进程(复制了父进程pcb中的数据),代码共享,数据独有.
进程拥有独立性,各自有各自的虚拟地址空间,映射各自数据存储.进程之间没有交叉关系,不会受到其它进程的运行影响,就是为了保证进程的稳定运行.

写时拷贝技术:子进程创建出来后,与父进程映射访问同一块物理内存,当物理内存中数据即将发生改变时,重新为子进程开辟空间,拷贝数据过去.(为了避免直接给子进程开辟空间拷贝数据,但是子进程又不使用.这样就降低了进程创建效率,造成内存冗余数据)

	(2).pid_t pid = vfork();
同样是创建一个子进程,但是一个进程使用vfork创建子进程之后,vfork的调用并不会立即返回(通常会阻塞子进程)
而是让子进程先运行,直到子进程退出,或者进行程序替换之后才能运行.
注意:vfork创建子进程,父子进程共用了父进程的虚拟地址空间.

在程序运行中,每调用一个函数,就会有一次函数压栈(函数调用栈);因为父子进程共用虚拟地址空间,使用了同一个栈,则若父子进程同时运行,就会造成调用栈混乱;因此先让子进程运行,直到子进程退出或者程序替换后有了自己的地址空间(在原有的地址空间中子进程的调用就出栈了)之后才能运行.

注意:vfork创建的子进程,不能在main函数中使用return退出,因为子进程使用return退出时释放了所有资源,父进程运行的时候资源是错误的,可能i导致直接报错,或者产生死循环.


进程终止:
	退出一个进程的三种方式:
		(1).main函数中的return(普通函数的return只能退出函数,不能退出进程)
		(2).在任意位置调用void exit(int status); 可以在程序的任意位置退出一个进程,并且退出时会刷新缓冲区,将缓冲区的数据写入文件
		(3).在任意位置调用void _exit(int status);可以在程序的任意位置退出一个进程,并且退出进程时直接释放资源,不会刷新缓冲区
缓冲区:
	printf打印数据,实际上是把数据交给显示器,让显示器显示出来(涉及到不同设备之间的数据交互)
	
	如果有很多小的数据频繁交给显示器,效率是比较低的,因此操作系统做了优化:把很多小的数据放到内存中缓冲起来,积累成一个大的数据,然后让显示器一次性取出来.
	因此,printf并没有立即把数据交给显示器,而是放到了内存缓冲区中,等到程序退出的时候或者刷新缓冲区的时候才会把数据交给显示器.

进程等待:
	概念:父进程等待子进程退出,为了获取退出子进程返回值,释放退出子进程所有资源,避免产生僵尸子进程.
	僵尸子进程的产生原因:因为子进程先于父进程退出,为了保存退出返回值,而无法完全释放资源产生的

如何等待:
	(1).int wait(int* status);
	是一个阻塞接口,处理退出的子进程,当然若没有子进程退出则会一直等待,直到有子进程退出才会调用.
	阻塞:为了完成一个功能,我们发起一个调用,但是若当前不具备的条件,则调用等待
	非阻塞:为了完成一个功能,我们发起一个调用,但是若当前不具备完成功能的条件,则调用立即报错返回
	status:输出型参数,用于获取退出子进程的返回值.
	注意:不管子进程是正常退出还是异常退出,只要退出了,没有被父进程等待处理,就都会成为僵尸子进程.
	(2).int waitpid(int pid,int* status,int option);
	与wait的不同之处:
		(1).wait等待的是任意一个子进程的退出(父进程假设有很多子进程,任意一个子进程退出都会调用处理返回)
		     waitpid可以等待指定的子进程,也可以等待任意一个子进程,通过第一个参数确定(第一个参数pid==-1,则表示等待任意子进程)
		(2).wait是一个阻塞接口(如果没有子进程退出,则会一直等待)
		     waitpid默认阻塞,也可以设置为非阻塞,通过第三个参数确定(第三个参数option==0,表示默认阻塞,option==WNOHANG,则表示非阻塞)
		(3).返回值:成功则返回退出子进程的pid(大于0),若是没有子进程退出则返回0,若出错则返回-1
	补充:非阻塞操作,通常需要循环处理,否则一次处理不成功,总不能不处理了,得循环判断能否进行处理,直到成功为止.






程序替换: 重新加载另一个程序到内存中,然后将现有的一个pcb的内存指针所指向这个新的程序(更新页表映射信息),则这个现有的pcb就跑去调度这个新的程序.
	#include <unistd.h>
	extern char** environ;
	
	int execl(const char* path,const char* arg,...); //path:带路径的程序文件名称,arg:表示程序的运行参数,逐个赋予,最终以NULL结尾



















